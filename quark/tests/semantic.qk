% Test semantic checking

float a = 6;

int f1: int c, int SDUI_9, string[][][] shit;
string foo: int c, int b;

def int test_scope: int a, int b
{
    for int c in [3:5]:
        int a;
    if true:
        int a;
    else
    {
        int a;
        return a+2;
    }
    int e;
}

def int test_return: int a, int b
{
    if true:
        1+1;
    else
    {
        int i;
        for i in [3:4]:
        {
            while true:
                return i;
        }
        i >> 2;

        for int j in [3:4]:
            int c = 3;
        int c;
    }
    int i;
}

def int f1: int a, int b, string[][][] c
{
    if true:
    {
        int a = 6;
        int dudu = 6;
    }
    else
    {
        int a = 6;
    }

    while true:
        a = 3;
    for a in [b>>1 : 6^4]:
        a = 2;

    % float a;
    float e = 4.5;
    5$43;
    <| 36, 32 |>;
    i(2);
    
    f1(53, 2.5, c);

    [["shit","damn", "ad"], ["shit"]] & [["sdf"]];

    % [[3,4,5],[2]] & [| i(-1,2), i(0,1) |];
    -[| i(4, -1); i(-1, 3); i(2,2.3) |] - [| i(3.6,0),i(-1,2) |];
    [[| 1,2; 3.1, -2; -6, 7 |], [| 1,4,5,6. |]];
    "dud" != "shittY";
    
    (6-7)$(2+10) * 2$-1;
    3 << 2;
    ~((1 & (2 | 13)));
    ~(3$2);

    <| 3, 2 |> ?' [2:10];
    complex[[]][][][][] mata;
    mata[1,2]; 
    mata[1,2,3,4] = [| i(1); i(-1) |];
    mata[1,2,3,4,5,6] = i(-3.2, 1.1);

    int[][] intarr = [[1,2,3],[5]];
    intarr[3, 4] ++;
    float[[]][] fmatarr;
    fmatarr[30, 2, 3] --;
    intarr[3] = [3,4,5];
    intarr[4,2] = 3.22;
return a + 1.4;
}

qreg q;

def string foo: int a, int b
{
    f1(a, 4.5, [[["shit"]]]);
    int e;
    {
        {
            fraction e;
            return "sfd";
        }
    }
}
