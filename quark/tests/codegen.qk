int foo: int a, string b, fraction[][] c;

def int foo: int c, string d, fraction[][] dudud
{
    fraction[] dud;
    print("good bool ", dud in dudud);
    print(dudud);
    if not (d == "shit"):
    {
        return -1;
    }
    else
    {
        return 1;
    }
}

int oracle_foo: int a;

int mygate: qreg q, bool b;

def int main:
{
    qreg q = <| 10, 2 |>;
    hadamard(q);
    apply_oracle(q, "oracle_foo", 2);
    fraction[10];
    complex[|] c = complex[| 10, 11 |];
    print(rowdim(c), " -> ", c);
    int[|][] imatarr;
    print(imatarr=[[| 10, 20, 30; -4, -5, -6; 17, 18, 19 |], [|3, 4; 1, 2|]]);

    complex[|] tmat = [| i(9), i(1, 3); i(-2, 40), i(13, 18) |];
    print(tmat ** [| i(-1.2), i(0, 3.3); i(-2, 0), i(1, -4.5) |]);
    print(tmat);
    print("-------");
    print([| i(9), i(1, 3); i(-2, 40), i(13, 18) |]');
    print(imatarr[0]');
    return 0;

    print([[[2, 3, 4], [5], [6, 7]], [[5]]]);
    print("Qureg query ", q ?' 1);
    i(10); i(1, 10);
    3$2;
    {
        3+ 5 * 3$2 - 10$11;
        2 - i(10) * ((4>>2) + i(-2, 1));
        int a;
    }
    "sdfsd" & "ireo";

    float i = 66;
    for i in [10:1:-1]:
        print("for ", i);

    int[][] all = [[100, 200, 300, 400], [500,600]];
    for int[] i in all:
        print("all ", i);

    print("after for: ", i);

    int[][][][] a;
    
    int[|] m = int[| 3, 4 |];
    m[3-2, 8 mod 6] = 6;
    print(m);
    fraction[][] farr = [[2$3], [4$3]];
    farr[0,0] = 5$19;
    print_noline(farr, "  ");
    print(foo(3, "shit", farr));
}

def int oracle_foo: int a
{
    return 2;
}
